// LICENSE : MIT
"use strict";

var tokenize = require("kuromojin").tokenize;

var dictionaryList = require("./dict");

var {
  createMatcher
} = require("morpheme-match-all");

var matchAll = createMatcher(dictionaryList);

module.exports = function (context) {
  var {
    Syntax,
    RuleError,
    report,
    getSource
  } = context;
  return {
    [Syntax.Str](node) {
      var text = getSource(node);
      return tokenize(text).then(currentTokens => {
        /**
         * @type {MatchResult[]}
         */
        var matchResults = matchAll(currentTokens);
        matchResults.forEach(matchResult => {
          var firstToken = matchResult.tokens[0];
          var lastToken = matchResult.tokens[matchResult.tokens.length - 1];
          var firstWordIndex = Math.max(firstToken.word_position - 1, 0); // replace $1

          var message = matchResult.dict.message;
          report(node, new RuleError(message, {
            index: firstWordIndex
          }));
        });
      });
    }

  };
};
//# sourceMappingURL=textlint-rule-ja-no-weak-phrase.js.map