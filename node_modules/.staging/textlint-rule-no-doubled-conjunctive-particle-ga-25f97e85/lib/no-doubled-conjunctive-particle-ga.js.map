{"version":3,"sources":["../src/no-doubled-conjunctive-particle-ga.js"],"names":["defaultOptions","separatorChars","RegExp","escape","str","String","replace","context","options","helper","RuleHelper","Syntax","report","getSource","RuleError","Paragraph","node","isChildNode","Link","Image","BlockQuote","Emphasis","source","StringSource","text","toString","isSentenceNode","type","SentenceSyntax","Sentence","charRegExp","join","sentences","filter","then","tokenizer","checkSentence","sentence","tokens","tokenizeForSentence","raw","isConjunctiveParticleGaToken","token","pos_detail_1","surface_form","conjunctiveParticleGaTokens","length","current","originalPosition","originalPositionFor","line","loc","start","column","word_position","padding","forEach"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {getTokenizer} from \"kuromojin\";\nimport splitSentences, {Syntax as SentenceSyntax} from \"sentence-splitter\";\nimport StringSource from \"textlint-util-to-string\";\n\nconst defaultOptions = {\n    separatorChars: [\"。\", \"?\", \"!\", \"？\", \"！\"]\n};\n// ref: https://stackoverflow.com/questions/2593637/how-to-escape-regular-expression-in-javascript\nRegExp.escape = function(str) {\n  return String(str).replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n};\n\n/*\n    1. Paragraph Node -> text\n    2. text -> sentences\n    3. tokenize sentence\n    4. report error if found word that match the rule.\n\n    TODO: need abstraction\n */\nexport default function (context, options = {}) {\n    const separatorChars = options.separatorChars || defaultOptions.separatorChars;\n    const helper = new RuleHelper(context);\n    const {Syntax, report, getSource, RuleError} = context;\n    return {\n        [Syntax.Paragraph](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const source = new StringSource(node);\n            const text = source.toString();\n            const isSentenceNode = node => {\n                return node.type === SentenceSyntax.Sentence;\n            };\n            const charRegExp = new RegExp(\"[\" + RegExp.escape(separatorChars.join(\"\")) + \"]\");\n            let sentences = splitSentences(text, {\n                charRegExp: charRegExp\n            }).filter(isSentenceNode);\n            return getTokenizer().then(tokenizer => {\n              const checkSentence = (sentence) => {\n                let tokens = tokenizer.tokenizeForSentence(sentence.raw);\n                const isConjunctiveParticleGaToken = token => {\n                  return token.pos_detail_1 === \"接続助詞\" && token.surface_form === \"が\";\n                };\n                let conjunctiveParticleGaTokens = tokens.filter(isConjunctiveParticleGaToken);\n                if (conjunctiveParticleGaTokens.length <= 1) {\n                  return;\n                }\n                let current = conjunctiveParticleGaTokens[0];\n                let originalPosition = source.originalPositionFor({\n                  line: sentence.loc.start.line,\n                  column: sentence.loc.start.column + (current.word_position - 1)\n                });\n                // padding position\n                var padding = {\n                  line: originalPosition.line - 1,\n                  // matchLastToken.word_position start with 1\n                  // this is padding column start with 0 (== -1)\n                  column: originalPosition.column\n                };\n                report(node, new RuleError(`文中に逆接の接続助詞 \"が\" が二回以上使われています。`, padding));\n                return current;\n              }\n              sentences.forEach(checkSentence);\n            });\n        }\n    }\n};\n"],"file":"no-doubled-conjunctive-particle-ga.js"}