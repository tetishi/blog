{"version":3,"sources":["../src/matchTokenStream.js"],"names":["matchToken","token","expectShape","Object","keys","every","key","actualValue","expectedValues","Array","isArray","some","expectedValue","expectTokenStream","tokenStream","currentTokenPosition","tokenCount","length","expectedToken"],"mappings":"AAAA;AACA;;;;;;;AACA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,WAA3B,EAAwC;AACpC,SAAOC,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,KAAzB,CAA+BC,GAAG,IAAI;AACzC,QAAMC,WAAW,GAAGN,KAAK,CAACK,GAAD,CAAzB,CADyC,CAEzC;;AACA,QAAME,cAAc,GAAGC,KAAK,CAACC,OAAN,CAAcR,WAAW,CAACI,GAAD,CAAzB,IAAkCJ,WAAW,CAACI,GAAD,CAA7C,GAAqD,CAACJ,WAAW,CAACI,GAAD,CAAZ,CAA5E;AACA,WAAOE,cAAc,CAACG,IAAf,CAAoBC,aAAa,IAAI;AACxC,aAAOL,WAAW,KAAKK,aAAvB;AACH,KAFM,CAAP;AAGH,GAPM,CAAP;AAQH;;AACc,SAASC,iBAAT,CAA2BC,WAA3B,EAAwC;AACnD,MAAIC,oBAAoB,GAAG,CAA3B;AACA,MAAMC,UAAU,GAAGF,WAAW,CAACG,MAA/B;AACA,SAAQhB,KAAD,IAAW;AACd,QAAMiB,aAAa,GAAGJ,WAAW,CAACC,oBAAD,CAAjC;;AACA,QAAIf,UAAU,CAACC,KAAD,EAAQiB,aAAR,CAAd,EAAsC;AAClCH,MAAAA,oBAAoB,IAAI,CAAxB;AACH,KAFD,MAEO;AACH;AACAA,MAAAA,oBAAoB,GAAG,CAAvB;AACH,KAPa,CAQd;;;AACA,QAAIA,oBAAoB,KAAKC,UAA7B,EAAyC;AACrC;AACAD,MAAAA,oBAAoB,GAAG,CAAvB;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAfD;AAgBH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nfunction matchToken(token, expectShape) {\n    return Object.keys(expectShape).every(key => {\n        const actualValue = token[key];\n        // 値は複数の場合もある\n        const expectedValues = Array.isArray(expectShape[key]) ? expectShape[key] : [expectShape[key]];\n        return expectedValues.some(expectedValue => {\n            return actualValue === expectedValue;\n        });\n    })\n}\nexport default function expectTokenStream(tokenStream) {\n    let currentTokenPosition = 0;\n    const tokenCount = tokenStream.length;\n    return (token) => {\n        const expectedToken = tokenStream[currentTokenPosition];\n        if (matchToken(token, expectedToken)) {\n            currentTokenPosition += 1;\n        } else {\n            // restart\n            currentTokenPosition = 0;\n        }\n        // match\n        if (currentTokenPosition === tokenCount) {\n            // match -> reset\n            currentTokenPosition = 0;\n            return true;\n        }\n        return false;\n    }\n}"],"file":"matchTokenStream.js"}